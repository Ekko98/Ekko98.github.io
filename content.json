{"pages":[{"title":"分类","permalink":"https://ekko98.github.io/categories/index.html","text":""},{"title":"Tagcloud","permalink":"https://ekko98.github.io/tags/index.html","text":""}],"posts":[{"title":"Clion-Cmake语法","permalink":"https://ekko98.github.io/2018/05/23/Cmake-grammer/","text":"写这个是因为在deepin下载了CLion，以为可以舒服～的写C/C++。。结果，打开seting一脸茫然，看不懂的配置选项，看不懂的CMake~.特地找了资料，把CMAke的语法🎠一下。 CMake 2.8.3共有80条命令。这些命令在手册中是字典序排列的；为了便于查找，翻译也按照字典序来组织。但是在翻译结束后，会对命令进行小结，与大家讨论一下这些命令的使用方法和使用时机. add_custom_command 为生成的构建系统添加一条自定义的构建规则。 add_custom_command命令有两种主要的功能；第一种是为了生成输出文件，添加一条自定义命令。 12345678910add_custom_command( OUTPUT output1 [output2 ...] COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [MAIN_DEPENDENCY depend] [DEPENDS [depends...]] [IMPLICIT_DEPENDS &lt;lang1&gt; depend1 ...] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM] [APPEND] ) 这种命令格式定义了一条生成指定的文件（文件组）的生成命令。在相同路径下创建的目标（CMakeLists.txt文件）——任何自定义命令的输出都作为它的源文件——被设置了一条规则：在构建的时候，使用指定的命令来生成这些文件。如果一个输出文件名是相对路径，它将被解释成相对于构建树路径的相对路径，并且与当前源码路径是对应的。注意，MAIN_DEPENDENCY完全是可选的，它用来向visual studio建议在何处停止自定义命令。对于各种类型的makefile而言，这条命令创建了一个格式如下的新目标： 12OUTPUT: MAIN_DEPENDENCY DEPENDS COMMAND 如果指定了多于一条的命令，它们会按顺序执行。ARGS参数是可选的，它的存在是为了保持向后兼容，以后会被忽略掉。 第二种格式为一个目标——比如一个库文件或者可执行文件——添加一条自定义命令。这种格式可以用于目标构建前或构建后的一些操作。这条命令会成为目标的一部分，并且只有目标被构建时才会执行。如果目标已经构建了，该目标将不会执行。 123456add_custom_command(TARGET target PRE_BUILD | PRE_LINK | POST_BUILD COMMAND command1 [ARGS] [args1...] [COMMAND command2 [ARGS] [args2...] ...] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM]) 这条命令定义了一个与指定目标的构建过程相关的新命令。新命令在何时执行，由下述的选项决定： PREBUILD - 在所有其它的依赖之前执行； PRE_LINK - 在所有其它的依赖之后执行； POST_BUILD - 在目标被构建之后执行； 注意，只有Visual Studio 7或更高的版本才支持PRE_BUILD。对于其他的生成器，PRE_BUILD会被当做PRE_LINK来对待。 如果指定了WORKING_DIRECTORY选项，这条命令会在给定的路径下执行.如果设置了COMMENT选项，后跟的参数会在构建时、以构建信息的形式、在命令执行之前显示出来。如果指定了APPEND选项,COMMAND以及DEPENDS选项的值会附加到第一个输出文件的自定义命令上.在此之前，必须有一次以相同的输出文件作为参数的对该命令的调用.在当前版本下，如果指定了APPEND选项,COMMENT,WORKING_DIRECTORY和MAIN_DEPENDENCY选项会被忽略掉，不过未来有可能会用到。 如果指定了VERBATIM选项，所有该命令的参数将会合适地被转义，以便构建工具能够以原汁原味的参数去调用那些构建命令。注意，在add_custom_command能看到这些参数之前，CMake语言处理器会对这些参数做一层转义处理。推荐使用VERBATIM参数，因为它能够保证正确的行为。当VERBATIM未指定时，CMake的行为依赖于平台，因为CMake没有针对某一种工具的特殊字符采取保护措施。 如果自定义命令的输出并不是实际的磁盘文件，应该使用SET_SOURCE_FILES_PROPERTIES命令将该输出的属性标记为SYMBOLIC。 IMPLICIT_DEPENDS选项请求扫描一个输入文件的隐含依赖关系。给定的语言参数（文中的lang1—译注）指定了应该使用哪种编程语言的依赖扫描器。目前为止，仅支持C和CXX语言扫描器。扫描中发现的依赖文件将会在编译时添加到自定义命令中。注意，IMPLICIT_DEPENDS选项目前仅仅直至Makefile生成器，其它的生成器会忽略之。 如果COMMAND选项指定了一个可执行目标（由ADD_EXECUTABLE命令创建的目标），在构建时，它会自动被可执行文件的位置所替换。而且，一个目标级的依赖性将会被添加进去，这样这个可执行目标将会在所有依赖于该自定义命令的结果的目标之前被构建。不过，任何时候重编译这个可执行文件，这种特性并不会引入一个会引起自定义命令重新运行的文件级依赖。 DEPENDS选项指定了该命令依赖的文件。如果依赖的对象是同一目录（CMakeLists.txt文件）下另外一个自定义命令的输出，CMake会自动将其它自定义命令带到这个命令中来。如果DEPENDS指定了任何类型的目标（由ADD*命令创建），一个目标级的依赖性将会被创建，以保证该目标在任何其它目标使用这个自定义命令的输出之前，该目标已经被创建了。而且，如果该目标是可执行文件或库文件，一个文件级依赖将会被创建，用来引发自定义命令在目标被重编译时的重新运行。 add_custom_target 添加一个目标，它没有输出；这样它就总是会被构建。 123456add_custom_target(Name [ALL] [command1 [args1...]] [COMMAND command2 [args2...] ...] [DEPENDS depend depend depend ... ] [WORKING_DIRECTORY dir] [COMMENT comment] [VERBATIM] [SOURCES src1 [src2...]]) 用Name选项给定的名字添加一个目标，这个目标会引发给定的那些命令.这个目标没有输出文件，并且总是被认为是过时的，即使那些命令试图去创建一个与该目标同名的文件。使用ADD_CUSTOM_COMMAND命令可以生成一个带有依赖性的文件。默认情况下，没有目标会依赖于自定义目标.使用ADD_DEPENDENCIES命令可以添加依赖于该目标或者被该目标依赖的目标。如果指定了ALL选项，这表明这个目标应该被添加到默认的构建目标中，这样它每次都会被构建（命令的名字不能是ALL）。命令和选项是可选的；如果它们没有被指定，将会产生一个空目标。如果设定了WORKING_DIRECTORY参数，该命令会在它指定的路径下执行。如果指定了COMMENT选项，后跟的参数将会在构件的时候，在命令执行之前，被显示出来。DEPENDS选项后面列出来的依赖目标可以引用add_custom_command命令在相同路径下（CMakeLists.txt）生成的输出和文件。 如果指定了VERBATIM选项，所有传递到该命令的选项将会被合适地转义；这样，该命令调用的构建工具会接收到未经改变的参数。注意，CMake语言处理器会在add_custom_target命令在看到这些参数之前对它们进行一层转义。推荐使用该参数，因为它保证了正确的行为。当未指定该参数时，转义的行为依赖于平台，因为CMake没有针对于特定工具中特殊字符的保护措施。 SOURCES选项指定了会被包含到自定义目标中的附加的源文件。指定的源文件将会被添加到IDE的工程文件中，方便在没有构建规则的情况下能够编辑。add_definitions 为源文件的编译添加由-D引入的define flag。1add_definitions(-DFOO -DBAR ...) 在编译器的命令行上，为当前路径以及下层路径的源文件加入一些define flag。这个命令可以用来引入任何flag，但是它的原意是用来引入预处理器的定义。那些以-D或/D开头的、看起来像预处理器定义的flag，会被自动加到当前路径的COMPILE_DEFINITIONS属性中。为了后向兼容，非简单值（non-trival，指的是什么？——译注）的定义会被留在flags组（flags set）里，而不会被转换。关于在特定的域以及配置中增加预处理器的定义，参考路径、目标以及源文件的COMPILE_DEFINITIONS属性来获取更多的细节。add_dependencies 为顶层目标引入一个依赖关系。 12add_dependencies(target-name depend-target1 depend-target2 ...) 让一个顶层目标依赖于其他的顶层目标。一个顶层目标是由命令ADD_EXECUTABLE，ADD_LIBRARY，或者ADD_CUSTOM_TARGET产生的目标。为这些命令的输出引入依赖性可以保证某个目标在其他的目标之前被构建。查看ADD_CUSTOM_TARGET和ADD_CUSTOM_COMMAND命令的DEPENDS选项，可以了解如何根据自定义规则引入文件级的依赖性。查看SET_SOURCE_FILES_PROPERTIES命令的OBJECT_DEPENDS选项，可以了解如何为目标文件引入文件级的依赖性。add_executable 使用给定的源文件，为工程引入一个可执行文件。 123456789add_executable(&lt;name&gt; [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] source1 source2 ... sourceN) ``` 引入一个名为&lt;name&gt;的可执行目标，该目标会由调用该命令时在源文件列表中指定的源文件来构建。&lt;name&gt;对应于逻辑目标名字，并且在工程范围内必须是全局唯一的。被构建的可执行目标的实际文件名将根据具体的本地平台创建出来（比如&lt;name&gt;.exe或者仅仅是&lt;name&gt;）。 默认情况下，可执行文件将会在构建树的路径下被创建，对应于该命令被调用的源文件树的路径。如果要改变这个位置，查看RUNTIME_OUTPUT_DIRECTORY目标属性的相关文档。如果要改变最终文件名的&lt;name&gt;部分，查看OUTPUT_NAME目标属性的相关文档。 如果指定了MACOSX_BUNDLE选项，对应的属性会附加在创建的目标上。查看MACOSX_BUNDLE目标属性的文档可以找到更多的细节。 如果指定了EXCLUDE_FROM_ALL选项，对应的属性将会设置在被创建的目标上。查看EXCLUDE_FROM_ALL目标属性的文档可以找到更多的细节。 使用下述格式，add_executable命令也可以用来创建导入的（IMPORTED）可执行目标： add_executable( IMPORTED) 1234 一个导入的可执行目标引用了一个位于工程之外的可执行文件。该格式不会生成构建这个目标的规则。该目标名字的作用域在它被创建的路径以及底层路径有效。它可以像在该工程内的其他任意目标一样被引用。导入可执行文件为类似于add_custom_command之类的命令引用它提供了便利。 关于导入的可执行文件的细节可以通过设置以IMPORTED开头的属性来指定。这类属性中最重要的是IMPORTED_LOCATION（以及它对应于具体配置的版本IMPORTED_LOCATION）；该属性指定了执行文件主文件在磁盘上的位置。查看IMPORTED_LOCATION属性的文档来获得更多信息。 **add_library** 使用指定的源文件向工程中添加一个库。 add_library( [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] source1 source2 … sourceN) 1234 添加一个名为&lt;name&gt;的库文件，该库文件将会根据调用的命令里列出的源文件来创建。&lt;name&gt;对应于逻辑目标名称，而且在一个工程的全局域内必须是唯一的。待构建的库文件的实际文件名根据对应平台的命名约定来构造（比如lib&lt;name&gt;.a或者&lt;name&gt;.lib）。指定STATIC，SHARED，或者MODULE参数用来指定要创建的库的类型。STATIC库是目标文件的归档文件，在链接其它目标的时候使用。SHARED库会被动态链接，在运行时被加载。MODULE库是不会被链接到其它目标中的插件，但是可能会在运行时使用dlopen-系列的函数动态链接。如果没有类型被显式指定，这个选项将会根据变量BUILD_SHARED_LIBS的当前值是否为真决定是STATIC还是SHARED. 默认状态下，库文件将会在于源文件目录树的构建目录树的位置被创建，该命令也会在这里被调用。查阅ARCHIVE_OUTPUT_DIRECTORY，LIBRARY_OUTPUT_DIRECTORY和RUNTIME_OUTPUT_DIRECTORY这三个目标属性的文档来改变这一位置。查阅OUTPUT_NAME目标属性的文档来改变最终文件名的&lt;name&gt;部分。 如果指定了EXCLUDE_FROM_ALL属性，对应的一些属性会在目标被创建时被设置。查阅EXCLUDE_FROM_ALL的文档来获取该属性的细节。 使用下述格式，add_library命令也可以用来创建导入的库目标： add_library( IMPORTED) 123 导入的库目标是引用了在工程外的一个库文件的目标。没有生成构建这个库的规则。这个目标名字的作用域在它被创建的路径及以下有效。他可以向任何在该工程内构建的目标一样被引用。导入库为类似于target\\_link\\_libraries命令中引用它提供了便利。关于导入库细节可以通过指定那些以IMPORTED\\_的属性设置来指定。其中最重要的属性是IMPORTED\\_LOCATION（以及它的具体配置版本，IMPORTED\\_LOCATION_&lt;CONFIG&gt;），它指定了主库文件在磁盘上的位置。查阅IMPORTED\\__LOCATION_属性的文档获取更多的信息。 **add_subdirectory** 为构建添加一个子路径。 add_subdirectory(source_dir [binary_dir] [EXCLUDE_FROM_ALL]) 1234 这条命令的作用是为构建添加一个子路径。source_dir选项指定了CMakeLists.txt源文件和代码文件的位置。如果source_dir是一个相对路径，那么source_dir选项会被解释为相对于当前的目录，但是它也可以是一个绝对路径。 binary_dir选项指定了输出文件的路径。如果binary_dir是相对路径，它将会被解释为相对于当前输出路径，但是它也可以是一个绝对路径。如果没有指定binary_dir，binary_dir的值将会是没有做任何相对路径展开的source_dir，这也是通常的用法。在source_dir指定路径下的CMakeLists.txt将会在当前输入文件的处理过程执行到该命令之前，立即被CMake处理。 如果指定了EXCLUDE_FROM_ALL选项，在子路径下的目标默认不会被包含到父路径的ALL目标里，并且也会被排除在IDE工程文件之外。用户必须显式构建在子路径下的目标，比如一些示范性的例子工程就是这样。典型地，子路径应该包含它自己的project()命令调用，这样会在子路径下产生一份完整的构建系统（比如VS IDE的solution文件）。注意，目标间的依赖性要高于这种排除行为。如果一个被父工程构建的目标依赖于在这个子路径下的目标，被依赖的目标会被包含到父工程的构建系统中，以满足依赖性的要求。 **add_test** 以指定的参数为工程添加一个测试. add_test(testname Exename arg1 arg2 … ) 1 如果已经运行过了ENABLE_TESTING命令，这个命令将为当前路径添加一个测试目标。如果ENABLE_TESTING还没有运行过，该命令啥事都不做。测试是由测试子系统运行的，它会以指定的参数执行Exename文件。Exename或者是由该工程构建的可执行文件，也可以是系统上自带的任意可执行文件（比如tclsh）。该测试会在CMakeList.txt文件的当前工作路径下运行，这个路径与二进制树上的路相对应。 add_test(NAME [CONFIGURATIONS [Debug|Release|…]] COMMAND [arg1 [arg2 …]]) 12 如果COMMAND选项指定了一个可执行目标（用add_executable创建），它会自动被在构建时创建的可执行文件所替换。如果指定了CONFIGURATIONS选项，那么该测试只有在列出的某一个配置下才会运行。 在COMMAND选项后的参数可以使用“生成器表达式”，它的语法是&quot;\\$&lt;...&gt;&quot;。这些表达式会在构建系统生成期间，以及构建配置的专有信息的产生期间被评估。合法的表达式是： $ = 配置名称 $ = 主要的二进制文件(.exe, .so.1.2, .a) $ = 用于链接的文件(.a, .lib, .so) $ = 带有.so.的文件(.so.3) 1234 其中，&quot;tgt&quot;是目标的名称。目标文件表达式TARGET_FILE生成了一个完整的路径，但是它的_DIR和_NAME版本可以生成目录以及文件名部分：``` $&lt;TARGET_FILE_DIR:tgt&gt;/$&lt;TARGET_FILE_NAME:tgt&gt; $&lt;TARGET_LINKER_FILE_DIR:tgt&gt;/$&lt;TARGET_LINKER_FILE_NAME:tgt&gt; $&lt;TARGET_SONAME_FILE_DIR:tgt&gt;/$&lt;TARGET_SONAME_FILE_NAME:tgt&gt; 用例： 123add_test(NAME mytest COMMAND testDriver --config $&lt;CONFIGURATION&gt; --exe $&lt;TARGET_FILE:myexe&gt;) 这段代码创建了一个名为mytest的测试，它执行的命令是testDriver工具，传递的参数包括配置名，以及由目标生成的可执行文件myexe的完整路径。aux_source_directory 查找在某个路径下的所有源文件。 1aux_source_directory(&lt;dir&gt; &lt;variable&gt;) 搜集所有在指定路径下的源文件的文件名，将输出结果列表储存在指定的变量中。该命令主要用在那些使用显式模板实例化的工程上。模板实例化文件可以存储在Templates子目录下，然后可以使用这条命令自动收集起来；这样可以避免手工罗列所有的实例。 使用该命令来避免为一个库或可执行目标写源文件的清单，是非常具有吸引力的。但是如果该命令貌似可以发挥作用，那么CMake就不需要生成一个感知新的源文件何时被加进来的构建系统了（也就是说，新文件的加入，并不会导致CMakeLists.txt过时，从而不能引起CMake重新运行。——译注）。正常情况下，生成的构建系统能够感知它何时需要重新运行CMake，因为需要修改CMakeLists.txt来引入一个新的源文件。当源文件仅仅是加到了该路径下，但是没有修改这个CMakeLists.txt文件，使用者只能手动重新运行CMake来产生一个包含这个新文件的构建系统。break 从一个包围该命令的foreach或while循环中跳出。 break() 从包围它的foreach循环或while循环中跳出。build_command 获取构建该工程的命令行。 1234build_command(&lt;variable&gt; [CONFIGURATION &lt;config&gt;] [PROJECT_NAME &lt;projname&gt;] [TARGET &lt;target&gt;]) 把给定的变量设置成一个字符串，其中包含使用由变量CMAKE_GENERATOR确定的项目构建工具，去构建某一个工程的某一个目标配置的命令行。 对于多配置生成器，如果忽略CONFIGURATION选项，CMake将会选择一个合理的默认值；而对于单配置生成器，该选项会被忽略。 如果PROJECT_NAME选项被忽略，得到的命令行用来构建当前构建树上的顶层工程。 如果TARGET选项被忽略，得到的命令行可以用来构建所有目标，比较高效的用法是构建目标all或者ALL_BUILD。 1build_command(&lt;cachevariable&gt; &lt;makecommand&gt;) 不推荐使用以上的这种格式，但对于后相兼容还是有用的。只要可以，就要使用第一种格式。 这种格式将变量设置为一个字符串，其中包含从构建树的根目录，用指定的构建工具构建这个工程的命令。应该是指向msdev，devenv，nmake，make或者是一种最终用户指定的构建工具的完整路径。cmake_minimum_required 设置一个工程所需要的最低CMake版本。 12cmake_minimum_required(VERSION major[.minor[.patch[.tweak]]] [FATAL_ERROR]) 如果CMake的当前版本低于指定的版本，它会停止处理工程文件，并报告错误。当指定的版本高于2.4时，它会隐含调用： 1cmake_policy(VERSION major[.minor[.patch[.tweak]]]) 从而将cmale的策略版本级别设置为指定的版本。当指定的版本是2.4或更低时，这条命令隐含调用： 1cmake_policy(VERSION 2.4) 这将会启用对于CMake 2.4及更低版本的兼容性。 FATAL_ERROR选项是可以接受的，但是CMake 2.6及更高的版本会忽略它。如果它被指定，那么CMake 2.4及更低版本将会以错误告终而非仅仅给出个警告。cmake_policy 管理CMake的策略设置。 随着CMake的演变，有时为了搞定bug或改善现有特色的实现方法，改变现有的行为是必须的。CMake的策略机制是在新的CMake版本带来行为上的改变时，用来帮助保持现有项目的构建的一种设计。每个新的策略（行为改变）被赋予一个”CMP“格式的识别符，其中”“是一个整数索引。每个策略相关的文档都会描述“旧行为”和“新行为”，以及引入该策略的原因。工程可以设置各种策略来选择期望的行为。当CMake需要了解要用哪种行为的时候，它会检查由工程指定的一种设置。如果没有可用的设置，工程假定使用“旧行为”，并且会给出警告要求你设置工程的策略。 cmake_policy是用来设置“新行为”或“旧行为”的命令。如果支持单独设置策略，我们鼓励各项目根据CMake的版本来设置策略。 1cmake_policy(VERSION major.minor[.patch[.tweak]]) 上述命令指定当前的CMakeLists.txt是为给定版本的CMake书写的。所有在指定的版本或更早的版本中引入的策略会被设置为使用“新行为”。所有在指定的版本之后引入的策略将会变为无效（unset）。该命令有效地为一个指定的CMake版本请求优先采用的行为，并且告知更新的CMake版本给出关于它们新策略的警告。命令中指定的策略版本必须至少是2.4，否则命令会报告一个错误。为了得到支持早于2.4版本的兼容性特性，查阅策略CMP0001的相关文档。 12 cmake_policy(SET CMP&lt;NNNN&gt; NEW) cmake_policy(SET CMP&lt;NNNN&gt; OLD) 对于某种给定的策略，该命令要求CMake使用新的或者旧的行为。对于一个指定的策略，那些依赖于旧行为的工程，通过设置策略的状态为OLD，可以禁止策略的警告。或者，用户可以让工程采用新行为，并且设置策略的状态为NEW。 1cmake_policy(GET CMP&lt;NNNN&gt; &lt;variable&gt;) 该命令检查一个给定的策略是否设置为旧行为或新行为。如果策略被设置，输出的变量值会是“OLD”或“NEW”，否则为空。 CMake将策略设置保存在一个栈结构中，因此，cmake_policy命令产生的改变仅仅影响在栈顶端的元素。在策略栈中的一个新条目由各子路径自动管理，以此保护它的父路径及同层路径的策略设置。CMake也管理通过include()和find_package()命令加载的脚本中新加入的条目，除非调用时指定了NO_POLICY_SCOPE选项（另外可参考CMP0011）。cmake_policy命令提供了一种管理策略栈中自定义条目的接口： 12cmake_policy(PUSH)cmake_policy(POP) 每个PUSH必须有一个配对的POP来去掉撤销改变。这对于临时改变策略设置比较有用。 函数和宏会在它们被创建的时候记录策略设置，并且在它们被调用的时候使用记录前的策略。如果函数或者宏实现设置了策略，这个变化会通过调用者(caller)一直上传，自动传递到嵌套的最近的策略栈条目。","categories":[{"name":"资料","slug":"资料","permalink":"https://ekko98.github.io/categories/资料/"}],"tags":[{"name":"Clion","slug":"Clion","permalink":"https://ekko98.github.io/tags/Clion/"},{"name":"CMake","slug":"CMake","permalink":"https://ekko98.github.io/tags/CMake/"}]},{"title":"基于QT的git配置","permalink":"https://ekko98.github.io/2018/05/16/基于QT的git配置/","text":"","categories":[],"tags":[]},{"title":"写在开篇","permalink":"https://ekko98.github.io/2018/05/15/hello-hexo/","text":"今天正式完成了，Hexo博客的搭建以及美化的基本工作。做一下基本的总结（过程中的种种坑） 首先，基本的hexo的安装帖子网上很多，可是关于细节有的地方却不尽详细，我先说我的情况。操作系统：deepin15.5 按照教程一步步执行 安装git 1$sudo apt-get install git 查看版本 1$ git version 安装node.js(安装node.js时，官网有两个版本，一个是长期维护的8一个是10，要注意10是附带npm的而8没有写，这直接影响后边npm命令的安装情况，于是发现这个问题后重新安装了10，费了很多周折） a.很多人都说了可以用sudo apt直接装但是版本不够新，都不推荐，直接用另一方法即可。b.首先官网下载最新版(附带npm)，然后解压。设置软链接将 node,npm命令设置全局命令： 12$ sudo ln -s /home/dudefu/Documents/node-v8.6.0-linux-x64/bin/node /usr/local/bin/node$ sudo ln -s /home/dudefu/Documents/node-v8.6.0-linux-x64/bin/npm /usr/local/bin/npm 查看版本验证 12node -vnpm -v 安装hexo 1$ npm install -g hexo-cli hexo-cli 安装路径 /home/dudefu/Documents/node-v8.6.0-linux-x64/lib/node_modules/hexo-cli，此时输入命令hexo会提示“未找到命令”,要将hexo-cli/bin/文件夹下的hexo命令设置为全局: 12$ sudo ln -s /home/dudefu/Documents/node-v8.6.0-linux-x64/lib/node_modules/hexo-cli/bin/$ hexo /usr/local/bin/hexo 再次输入即可验证. 创建hexo按照如下命令进行创建并启动服务。 12345$ mkdir hexo$ cd hexo$ hexo init .$ npm install $ hexo server --open 配置hexo想要换一个漂亮主题，可以去官网下载，但我找到的几个都因为配置参数不合适而应用失败。网上主题很多，找到一款自己喜欢的进行配置即可，不过其实发现，博客的配置好用为主，能展示应有的功能，方便简洁就好。当前博客用的next主题，很多功能配置教程很多，比较适用. 第一篇博客，附上我韵的美照～","categories":[{"name":"教程","slug":"教程","permalink":"https://ekko98.github.io/categories/教程/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://ekko98.github.io/tags/hexo/"}]}]}